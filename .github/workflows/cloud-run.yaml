# This workflow builds and pushes a Docker container to Google Artifact Registry
# and creates a release in Cloud Deploy using a declarative YAML Service
# specification (service-*.yaml) when a commit is pushed to the $default-branch branch.
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Configure Docker for Artifact Registry
# 3. Build a container image
# 4. Publish it to Google Artifact Registry
# 5. Create YAML manifests from templates
# 6. Create a Cloud Deploy delivery pipeline and targets (staging and production)
# 7. Create a Cloud Deploy release to deploy the container image to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Build          cloudbuild.googleapis.com
#    Cloud Deploy         clouddeploy.googleapis.com
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted to the service account configured in
#    Workload Identity Federation:
#
#    Artifact Registry
#      roles/artifactregistry.writer    (Project or repository level)
#
#    Cloud Deploy
#      roles/clouddeploy.operator       (To configure Cloud Deploy)
#
#    Cloud Storage
#      roles/storage.admin              (To write release packages)
#
# 4. Ensure the required IAM permissions are granted to the default compute
#    service account:
#
#    Cloud Logging
#      roles/logging.logWriter          (To write logs)
#
#    Cloud Run
#      roles/run.developer              (To create Cloud Run services)
#
#    Cloud Storage
#      roles/storage.objectViewer       (To read Cloud Deploy artifacts)
#      roles/storage.objectCreator      (To write Cloud Deploy artifacts)
#
#    Additionally, the default compute service account requires permissions to "ActAs" itself
#    to be able to deploy to Cloud Run. You can add this permission with the following command:
#
#    gcloud iam service-accounts add-iam-policy-binding $(gcloud projects describe ${PROJECT_ID} \
#    --format="value(projectNumber)")-compute@developer.gserviceaccount.com \
#    --member="serviceAccount:$(gcloud projects describe ${PROJECT_ID}\
#    --format="value(projectNumber)")-compute@developer.gserviceaccount.com" \
#    --role="roles/iam.serviceAccountUser"
#
#    If you have not already done so, the service account you are using via Workload Identity Federation
#    additionally needs to be permitted to "ActAs" the default compute service account. Substitute
#    your GHA service account name for [YOUR_GHA_SERVICE_ACCOUNT] in the following command:
#
#    gcloud iam service-accounts add-iam-policy-binding $(gcloud projects describe ${PROJECT_ID} \
#    --format="value(projectNumber)")-compute@developer.gserviceaccount.com \
#    --member="serviceAccount:[YOUR_GHA_SERVICE_ACCOUNT]@${PROJECT_ID}.iam.gserviceaccount.com" \
#    --role="roles/iam.serviceAccountUser"
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 5. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 6. Change the values for the PROJECT_ID, GAR_LOCATION, and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/create-cloud-deploy-release
#
# Further reading:
#   Cloud Deploy IAM permissions              - https://cloud.google.com/deploy/docs/iam-roles-permissions
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Cloud Run IAM roles                       - https://cloud.google.com/run/docs/reference/iam/roles
#   Cloud Run targets in Cloud Deploy         - https://cloud.google.com/deploy/docs/run-targets

name: Build app and create a release in Cloud Deploy

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: ${{secrets.PROJECT_ID}}
  REGION: us-central1
  SERVICE_NAME: ml-api
  BASIC_AUTH_USERNAME: ${{secrets.BASIC_AUTH_USERNAME}} 
  BASIC_AUTH_PASSWORD: ${{secrets.BASIC_AUTH_PASSWORD}}
  CLOUDSDK_PYTHON: /usr/bin/python3.9


jobs:
  setup-build-deploy:
    name: Setup, Build and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout'
      uses: 'actions/checkout@v2'

    # Para evitar problemas de compatibilidade, é necessário definir a versão do Python
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'


    # Setup Google CLI
    - uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: '${{ secrets.PROJECT_ID }}'
        service_account_key: '${{ secrets.RUN_SA_KEY }}'
        version: 'latest'
    
    # Build and push the Docker image to Google Container Registry
    - name: build
      run: |-
        gcloud builds submit \
          --quiet \
          --config=cloudbuild.yaml \
          --substitutions=_BASIC_AUTH_USERNAME=${{ env.BASIC_AUTH_USERNAME }},_BASIC_AUTH_PASSWORD=${{ env.BASIC_AUTH_PASSWORD }},_IMAGE_TAG="gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA"

    
    - name: Deploy
      run: |-
        gcloud run deploy $SERVICE_NAME \
          --quiet \
          --region $REGION \
          --image "gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA" \
          --platform managed \
          --allow-unauthenticated \
          --port=5000
   